#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const chalk = require('chalk');
const fetch = require('node-fetch');
const copyPaste = require('copy-paste');
const configuration = require('../lib/settings')();

program
  .arguments('[name]')
  .option('-c, --cert [file]', 'The SSL bundled certificate file')
  .option('-k, --key [file]', 'The SSL key file')
  .action(name => ssl({name: name, key: program.key, cert: program.cert}))
  .parse(process.argv);

if(!program.args.length) ssl(program.opts());

function ssl(setup) {
  const keyFile = fs.existsSync(setup.key) && fs.readFileSync(setup.key).toString();
  const certFile = fs.existsSync(setup.cert) && fs.readFileSync(setup.cert).toString();
  if(!(keyFile && certFile)) console.error(chalk.red(`Invalid SSL content. Verify your Certificate, Key and CA file content please.`));

  configuration
  .load()
  .then(settings => { console.log(`Setup SSL ${chalk.green.underline(setup.name || settings.name || '-')} for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(settings.url || '-')}`); return settings;})
  .then(settings => Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed. Use `dropstack login` to log in with your credentials.')) : settings)
  .then(settings => fetch(`${settings.url}/deploys/${setup.name || settings.name}/ssl`, { method: 'PUT', body: JSON.stringify({ssl_key: keyFile || '', ssl_cert: certFile || ''}), headers: { Authorization: `Bearer ${settings.token}`, 'Content-Type': 'application/json' } })
    .then(response => response.status >= 400 ? Promise.reject(new Error(`Response error: ${response.statusText}`)) : response)
    .then(response => response.json()))
  .then(data => Boolean(data.message) ? Promise.reject(new Error(data.message)) : data)
  .then(data => {
    console.log(chalk.green(`SSL certificate for ${data.serviceAlias || data.serviceName} updated.`));
    console.log(chalk.gray('URL copied to clipboard.'));
    copyPaste.copy(`https://${data.serviceAlias || data.serviceUrl || ''}`);
  })
  .catch(err => {
    if(err.message === 'Sign in failed. Use `dropstack login` to log in with your credentials.'){
      console.error(chalk.red(`Credentials not found. Use ${chalk.bold('dropstack login')} to verifiy your credentials.`));
      process.exit(1);
    }
    console.error(chalk.red(`\nAn error occurred: ${chalk.gray(err.message)}`));
    process.exit(1);
  });
}
