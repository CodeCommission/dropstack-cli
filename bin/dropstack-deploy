#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const os = require('os');
const program = require('commander');
const chalk = require('chalk');
const tar = require('tar');
const fstream = require('fstream');
const fetch = require('node-fetch');
const copyPaste = require('copy-paste');
const ProgressBar = require('progress');
const FormData = require('form-data');
const credentials = require('../lib/credentials')();
const configuration = require('../lib/settings')();

program
  .arguments('[folder]')
  .option('-u, --url [url]', 'Use JWT credentials')
  .option('-t, --token [token]', 'Use JWT credentials')
  .option('-a, --alias [name]', 'Set alias of deployment', '')
  .option('-v, --variables [items]', 'Key=Value variables', (item, list) => { list.push(item); return list; }, [])
  .option('-i, --instances [number]', 'Number of running instances for deployment')
  .parse(process.argv);

deploy(Object.assign(program.opts(), {folder: program.args.length === 0 ? process.cwd() : program.args[0] }));

function deploy({folder, url, token, variables, instances, alias}){
  const args = path.resolve(folder);
  const pathObj = path.parse(args);
  const tarPath = path.join(os.tmpdir(), `${pathObj.name}.tar`);
  const dirDest = fs.createWriteStream(tarPath);
  const packer = tar
    .Pack({ noProprietary: true, fromBase: true })
    .on('error', err => console.error(chalk.red(`An error occurred: ${chalk.gray(err.message)}`)))
    .on('end', () => sync({
      tarPath,
      variables,
      url,
      token,
      instances,
      alias,
    }));

  configuration
  .load()
  .then(settings => {
    fstream.Reader({ path: args, type: 'Directory', follow: false, filter: x => tarFileFilter(x, settings.excludes)})
      .on('error', err => console.error(chalk.red(`An error occurred: ${chalk.gray(err.message)}`)))
      .pipe(packer)
      .pipe(dirDest);
  });
}

function sync({tarPath, token, url, variables, instances, alias}){
  configuration
  .load({variables, tarPath, instances, token, url, alias})
  .then(settings => { console.log(`Deploying ${chalk.green.underline(settings.alias || settings.name || '-')} for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(settings.url || '-')}`); return settings;})
  .then(settings => {
    if(settings.message) return Promise.reject(new Error(settings.message));
    return settings;
  })
  .then(settings => configuration.save(settings))
  .then(settings => deployment(settings))
  .then(settings => configuration.save(settings))
  .then(settings => {
    console.log(chalk.green('\nDeployment completed'), chalk.gray('URL copied to clipboard.'));
    console.log(`Deploy URL: ${chalk.bold(settings.serviceUrl)}`);
    if(settings && settings.alias) console.log(`Alias URL: ${settings.alias}`);
  })
  .catch(err => {
    if(err.message === 'canceled') {
      console.log(chalk.yellow('aborted'));
      return process.exit(0);
    }
    if(err.message.indexOf('building error') !== -1) {
      console.error(chalk.red(`\n${err.message}`))
      console.error(chalk.red(`Verify your Dockerfile, please!`))
      return process.exit(1);
    }
    console.error(chalk.red(`\nAn error occurred ${chalk.gray(err.message)}`));
    process.exit(1);
  });
}

function deployment(settings) {
  const pathObj = path.parse(settings.tarPath);
  const form = new FormData();
  const bar = new ProgressBar('[:current/:total :deployProgress] [:bar] :percent :elapseds', { total: 11, width: 24 });

  if(settings.name) form.append('serviceName', settings.name);
  if(settings.alias) form.append('serviceAlias', settings.alias);
  if(settings.instances) form.append('serviceInstances', settings.instances);
  if(settings.variables) form.append('serviceVariables', settings.variables.join(','));
  form.append(pathObj.name, fs.createReadStream(settings.tarPath));

  return fetch(`${settings.url}/deploys/${settings.name || ''}`, {
    method: 'POST',
    body: form,
    headers: { Authorization: `Bearer ${settings.token}`, }
  })
  .then(response => {
    return new Promise((resolve, reject) => {
      if(response.status >= 400) reject(new Error(`Response error: ${response.statusText}`));
      let message = '';
      let result = { message: 'Malformed response' };
      response.body.on('end', () => resolve(result));
      response.body.on('data', chunk => {
        message += chunk.toString('utf-8');
        const messageSeparatorIndex = message.indexOf('\n');
        if (messageSeparatorIndex > 0) {
          const progress = message.slice(0, messageSeparatorIndex);
          try {
            const progressState = JSON.parse(progress);            
            result = progressState;
            if(progressState && progressState.message) return reject(new Error(`${progressState.deployProgress}: ${progressState.message}`));
            if(progressState && progressState.deployProgress) bar.tick(progressState);   
            message = message.slice(messageSeparatorIndex + 1);
          } catch(err) {
            reject(err);
          }
          
        }
      });
    });
  })
  .then(data => {
    settings.name = data.serviceName;
    settings.serviceUrl = data.serviceUrl;
    settings.alias = data.serviceAlias;
    settings.type = data.serviceType;
    settings.instances = data.serviceInstances;
    settings.variables = data.serviceVariables;
    copyPaste.copy(data.serviceAlias || data.serviceUrl || '');
    return settings;
  });
}

function tarFileFilter(entry, excludes = []) {
  return excludes.every(x => x !== entry.basename) && entry.basename !== 'node_modules' && entry.basename !== 'npm-debug.log' && entry.basename !== '.git' && entry.basename !== '.DS_Store';
}
