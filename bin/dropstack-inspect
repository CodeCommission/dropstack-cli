#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const boxen = require('boxen');
const chalk = require('chalk');
const fetch = require('node-fetch');
const configuration = require('../lib/settings')();

program
  .arguments('[name]')
  .option('-s, --save', 'Save deployment settings.')
  .action(name => inspect({name, save: program.save}))
  .parse(process.argv);

if (!program.args.length) inspect(program.opts());

function inspect({name, save}) {
  configuration
    .load()
    .then(settings => {
      console.log(
        `Inspect ${chalk.green.underline(name || settings.name || '-')} for ${chalk.green.underline(
          settings.username || '-'
        )} on ${chalk.green.underline(settings.url || '-')}`
      );
      return settings;
    })
    .then(
      settings =>
        Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed')) : settings
    )
    .then(settings => (Boolean(name || settings.name) ? settings : Promise.reject(`Deployment name missing`)))
    .then(settings =>
      fetch(`${settings.url}/deploys/${name || settings.name}`, {
        headers: {Authorization: `Bearer ${settings.token}`, 'Content-Type': 'application/json'}
      })
        .then(
          response =>
            response.status >= 400 ? Promise.reject(new Error(`Response error: ${response.statusText}`)) : response
        )
        .then(response => response.json())
        .catch(_ => null)
        .then(data => {
          if (data.error) return null;
          return data;
        })
        .then(data =>
          Object.assign({}, settings, {
            createdAt: data ? data.createdAt : null,
            modifiedAt: data ? data.modifiedAt : null,
            name: data ? data.serviceName : settings.name,
            instances: data ? data.serviceInstances : settings.instances,
            type: data ? data.serviceType : settings.type,
            stateful: data ? data.serviceStateful : settings.stateful,
            variables: data ? (data.serviceVariables || []).join(',') : settings.variables,
            serviceUrl: data ? data.serviceUrl : settings.serviceUrl,
            alias: data ? data.serviceAlias : settings.alias,
            domain: data ? data.serviceDomain : settings.domain,
            excludes: data ? data.serviceExcludes : settings.excludes || [],
            mappings: data ? data.serviceMappings : settings.mappings || [],
            ssl_key: data ? data.ssl_key : settings.ssl_key,
            ssl_cert: data ? data.ssl_cert : settings.ssl_cert
          })
        )
    )
    .then(data => {
      let message = chalk.green(`Service informations for ${chalk.bold(data.name)}\n\n`);
      message += chalk.gray(`URL          : ${chalk.white(`${data.serviceUrl.replace('https://', '')}`)}\n`);
      message += chalk.gray(`Type         : ${chalk.white(`${data.type.toUpperCase()}`)}\n`);
      message += chalk.gray(`Stateful     : ${chalk.white(`${Boolean(data.stateful)}`)}\n`);
      message += chalk.gray(`Instances    : ${chalk.white(`${data.instances}`)}\n`);
      message += chalk.gray(`Domain/Alias : ${chalk.white(`${data.domain || data.alias || '-'}`)}\n`);
      message += chalk.gray(`Custom SSL   : ${chalk.white(`${Boolean(data.ssl_key) && Boolean(data.ssl_cert)}`)}\n`);
      if (data.createdAt) message += chalk.gray(`Created      : ${chalk.white(`${new Date(data.createdAt)}`)}\n`);
      if (data.modifiedAt) message += chalk.gray(`Modified     : ${chalk.white(`${new Date(data.modifiedAt)}`)}\n`);

      if (!data.variables) message += chalk.gray(`\nVariables    : ${chalk.white('-')}`);
      if (data.variables) {
        data.variables.split(',').forEach(variable => {
          message += chalk.gray(`\nVariables    : ${chalk.white(`${variable}`)}`);
        });
      }

      if (!data.excludes) message += chalk.gray(`\nExcludes     : ${chalk.white('-')}`);
      if (data.excludes) {
        message += '\n';
        data.excludes.forEach(exclude => {
          message += chalk.gray(`\nExcludes     : ${chalk.white(`${exclude}`)}`);
        });
      }

      if (!data.mappings) message += chalk.gray(`\nMappings     : ${chalk.white('-')}`);
      if (data.mappings) {
        message += '\n';
        Object.keys(data.mappings).forEach(mapping => {
          message += chalk.gray(
            `\nMapping      : ${chalk.white(mapping)} ${chalk.gray('->')} ${chalk.white(`${data.mappings[mapping]}`)}`
          );
        });
      }

      console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}));
      return data;
    })
    .then(data => {
      delete data.serviceName;
      delete data.serviceImage;
      delete data.serviceVariables;
      delete data.serviceExcludes;
      delete data.serviceMappings;
      delete data.serviceType;
      delete data.serviceInstances;
      delete data.serviceStateful;
      delete data.serviceAlias;
      delete data.createdAt;
      delete data.modifiedAt;
      return data;
    })
    .then(data => (save ? configuration.save(data).then(() => data) : data))
    .then(() => process.exit(0))
    .catch(err => {
      console.log(err);
      if (err.message === 'canceled') {
        console.log(chalk.yellow('\nAborted operation.'));
        return process.exit(0);
      }

      if (err === 'Deployment name missing') {
        console.error(chalk.yellow(`\nEnter a service name to inspect.`));
        return process.exit(1);
      }

      if (err.message === 'Sign in failed') {
        console.error(
          chalk.red(`\nCredentials not found. Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`)
        );
        process.exit(1);
      }

      if (err.message === 'Unauthorized') {
        console.error(
          chalk.red(`\nUnauthorized. Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`)
        );
        process.exit(1);
      }

      if (err.message === 'Service not found') {
        console.error(
          chalk.red(
            `\nService not found. Wrong account? Use ${chalk.bold(
              'dropstack login <url>'
            )} to verifiy your credentials.`
          )
        );
        process.exit(1);
      }

      if (err.message === 'Not found') {
        console.error(
          chalk.red(`\nServer communication error occurred! Retry later please.\nError: ${chalk.gray(err.message)}`)
        );
        process.exit(1);
      }

      console.error(chalk.red(`\nAn unexpected error occurred!\nError: ${chalk.gray(err.message)}`));
      process.exit(1);
    });
}
