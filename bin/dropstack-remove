#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const chalk = require('chalk');
const fetch = require('node-fetch');
const ProgressBar = require('progress');
const configuration = require('../lib/settings')();

program
  .arguments('[name]')
  .option('-f, --force', 'Remove local configuration')
  .action(name => remove({name: name, force: program.force}))
  .parse(process.argv);

if(!program.args.length) remove(program.opts());

function remove({name, force}){
  const bar = new ProgressBar('[:current/:total :destroyProgress] [:bar] :percent :elapseds', { total: 4, width: 24 });
  configuration
  .load()
  .then(settings => { console.log(`Remove deployment ${chalk.red.underline(name || settings.name || '-')} for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(settings.url || '-')}`); return settings;})
  .then(settings => Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed. Use `dropstack login` to log in with your credentials.')) : settings)
  .then(settings => fetch(`${settings.url}/deploys/${name || settings.name}`, { method: 'DELETE', headers: { Authorization: `Bearer ${settings.token}`} }))
  .then(response => {
    return new Promise((resolve, reject) => {
      if(response.status >= 400) reject(new Error(`Response error: ${response.statusText}`));

      let message = '';
      let result = { message: 'Malformed response' };
      response.body.on('end', () => resolve(result));
      response.body.on('data', chunk => {
        message += chunk.toString('utf-8');
        const messageSeparatorIndex = message.indexOf('\n');
        if (messageSeparatorIndex > 0) {
          const progress = message.slice(0, messageSeparatorIndex);
          try {
            const progressState = JSON.parse(progress);
            result = progressState;
            if(progressState && progressState.message) return reject(new Error(`${progressState.destroyProgress}: ${progressState.message}`));
            if(progressState && progressState.destroyProgress) bar.tick(progressState);
            message = message.slice(messageSeparatorIndex + 1);
          } catch(err) {
            reject(err);
          }
        }

      });

    });
  })
  .then(data => console.log(`Deployment ${chalk.red.bold(data.serviceName)} removed`))
  .then(() => force ? configuration.remove() : Promise.resolve())
  .catch(err => {
    if(err.message === 'Sign in failed. Use `dropstack login` to log in with your credentials.'){
      console.error(chalk.red(`Credentials not found. Use ${chalk.bold('dropstack login')} to verifiy your credentials.`));
      process.exit(1);
    }
    console.error(chalk.red(`\nAn error occurred: ${chalk.gray(err.message)}`));
    process.exit(1);
  });
}
