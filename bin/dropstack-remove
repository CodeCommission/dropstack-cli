#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const chalk = require('chalk');
const fetch = require('node-fetch');
const EventSource = require('eventsource');
const configuration = require('../lib/settings')();

program
  .arguments('[name]')
  .option('-f, --force', 'Remove local configuration')
  .action(name => remove({name: name, force: program.force}))
  .parse(process.argv);

if(!program.args.length) remove(program.opts());

function remove({name, force}){
  configuration
  .load()
  .then(settings => { console.log(`Remove deployment ${chalk.red.underline(name || settings.name || '-')} for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(settings.url || '-')}`); return settings;})
  .then(settings => Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed. Use `dropstack login` to log in with your credentials.')) : settings)
  .then(settings => {
    return new Promise((resolve, reject) => {
      const spin = ' ⢹⢺⢼⣸⣇⡧⡗⡏'.split('');
      let n = 1;
      const es = new EventSource(`${settings.url}/deploys/live`, {headers: {connection: 'keep-alive', 'cache-control': 'no-cache', authorization: `Bearer ${settings.token}`}});
      process.stderr.write('\x1B[?25l'); //hide terminal cursor

      es.onerror = () => {
        process.stderr.write('\x1B[?25h'); //show terminal cursor
        reject(new Error(`Deployment error occurred. Retry please.`));
      };
      es.onmessage = e => {
        let progressState = {};
        try {
          progressState = JSON.parse(e.data)
        } catch(e) {}

        if(n === 8) n = 1;
        process.stdout.cursorTo(0);
        process.stdout.write(`${spin[n++]}`);
        if(progressState && progressState.message) {
          es.close();
          return reject(new Error(`${progressState.deployProgress}: ${progressState.message}`));
        }
        if(progressState && progressState.deployProgress === 'deregistrated') {
          process.stdout.cursorTo(0);
          process.stdout.clearLine();
          console.log(chalk.gray(`Deployment ${progressState.deployProgress}`));
          process.stderr.write('\x1B[?25h'); //show terminal cursor
          es.close();
          return resolve(progressState);
        }
        if(progressState.deployProgress) {
          process.stdout.cursorTo(2);
          process.stdout.clearLine();
          process.stdout.write(chalk.gray(capitalizeFirstLetter(progressState.deployProgress)));
        }
      };

      fetch(`${settings.url}/deploys/${name || settings.name}`, { method: 'DELETE', headers: { Authorization: `Bearer ${settings.token}`} })
      .catch(err => {
        es.close();
        reject(err);
      });
    });
  })
  .then(data => console.log(`Deployment ${chalk.red.bold(data.serviceName)} removed`))
  .then(() => force ? configuration.remove() : Promise.resolve())
  .catch(err => {
    if(err.message === 'Sign in failed. Use `dropstack login` to log in with your credentials.'){
      console.error(chalk.red(`Credentials not found. Use ${chalk.bold('dropstack login')} to verifiy your credentials.`));
      process.exit(1);
    }
    console.error(chalk.red(`\nAn error occurred: ${chalk.gray(err.message)}`));
    process.stderr.write('\x1B[?25h'); //show terminal cursor
    process.exit(1);
  })
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}