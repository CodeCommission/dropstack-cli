#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const boxen = require('boxen');
const chalk = require('chalk');
const fetch = require('node-fetch');
const EventSource = require('eventsource');
const configuration = require('../lib/settings')();

program
  .arguments('[name]')
  .option('-f, --force', 'Remove local configuration')
  .action(name => remove({name: name, force: program.force}))
  .parse(process.argv);

if (!program.args.length) remove(program.opts());

function remove({name, force}) {
  configuration
    .load()
    .then(settings => {
      console.log(
        `Remove deployment ${chalk.red.underline(name || settings.name || '-')} for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(
          settings.url || '-'
        )}`
      );
      return settings;
    })
    .then(settings => (Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed')) : settings))
    .then(settings => {
      return new Promise((resolve, reject) => {
        const spin = ' ⢹⢺⢼⣸⣇⡧⡗⡏'.split('');
        const startDate = new Date();
        let n = 1;
        const es = new EventSource(`${settings.url}/deploys/live`, {
          headers: {connection: 'keep-alive', 'cache-control': 'no-cache', authorization: `Bearer ${settings.token}`}
        });
        process.stderr.write('\x1B[?25l'); //hide terminal cursor

        es.onerror = () => {
          process.stderr.write('\x1B[?25h'); //show terminal cursor
          reject(new Error(`A deployment error has occurred. Retry please.`));
        };
        es.onmessage = e => {
          let progressState = {};
          try {
            progressState = JSON.parse(e.data);
          } catch (e) {}

          if (n === 8) n = 1;
          process.stdout.cursorTo(0);
          process.stdout.write(`${spin[n++]}`);
          if (progressState && progressState.message) {
            es.close();
            return reject(new Error(`${progressState.deployProgress}: ${progressState.message}`));
          }
          if (progressState && progressState.deployProgress === 'deregistrated') {
            process.stdout.cursorTo(0);
            process.stdout.clearLine();
            console.log(chalk.gray(`Deployment ${progressState.deployProgress} [${((new Date().getTime() - startDate.getTime()) / 1000).toFixed(2)}s]`));
            process.stderr.write('\x1B[?25h'); //show terminal cursor
            es.close();
            return resolve(progressState);
          }
          if (progressState.deployProgress) {
            process.stdout.cursorTo(2);
            process.stdout.clearLine();
            process.stdout.write(chalk.gray(`${capitalizeFirstLetter(progressState.deployProgress)} [${((new Date().getTime() - startDate.getTime()) / 1000).toFixed(2)}s]`));
          }
        };

        es.onopen = e => {
          fetch(`${settings.url}/deploys/${name || settings.name}`, {
            method: 'DELETE',
            headers: {Authorization: `Bearer ${settings.token}`}
          })
            .then(response => response.json())
            .then(data => {
              if (data.error || data.message) return Promise.reject(new Error(data.error || data.message));
              return data;
            })
            .catch(err => {
              es.close();
              reject(err);
            });
        };
      });
    })
    .then(data => {
      let message = `${chalk.green(`Deployment ${chalk.red.bold(data.serviceName)} removed!`)}`;
      console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}));

      return data;
    })
    .then(() => (force ? configuration.remove() : Promise.resolve()))
    .catch(err => {
      process.stderr.write('\x1B[?25h'); //show terminal cursor

      if (err.message === 'canceled') {
        console.log(chalk.yellow('\nOperation aborted.'));
        return process.exit(0);
      }

      if (err.message === 'Sign in failed') {
        console.error(chalk.red(`\nCredentials not found. Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`));
        process.exit(1);
      }

      if (err.message === 'Unauthorized') {
        console.error(chalk.red(`\nUnauthorized. Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`));
        process.exit(1);
      }

      if (err.message === 'Service not found') {
        console.error(chalk.red(`\nService not found. Wrong account? Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`));
        process.exit(1);
      }

      if (err.message === `error: ${name} missing`) {
        console.error(chalk.red(`\nService not found. Already removed or wrong account? Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`));
        process.exit(1);
      }

      if (err.message === 'Not found') {
        console.error(chalk.red(`\nServer communication error occurred! Retry later please.\nError: ${chalk.gray(err.message)}`));
        process.exit(1);
      }

      console.error(chalk.red(`\nAn unexpected error occurred!\nError: ${chalk.gray(err.message)}`));
      process.exit(1);
    });
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
