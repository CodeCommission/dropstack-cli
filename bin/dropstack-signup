#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const boxen = require('boxen');
const fetch = require('node-fetch');
const urlRegex = require('url-regex');
const chalk = require('chalk');
const credentials = require('../lib/credentials')();
const configuration = require('../lib/settings')();
const appPackage = require('../package.json');

program
  .arguments('<url>')
  .action(url => signup(Object.assign({url: url})))
  .parse(process.argv);

if (!program.args.length) signup(program.opts());

function signup({url, token}) {
  if (url && !urlRegex({exact: true}).test(url)) {
    console.log(chalk.red('Invalid Dropstack-Server-URL. Must be the format https://host.domain.com.'));
    return process.exit(1);
  }

  configuration
    .removeGlobalFile()
    .then(() => configuration.load({url}))
    .then(settings => {
      console.log(chalk.green(`Enter your email, password and password validation to sign up into ${chalk.bold(settings.url || '-')}\n`));
      return settings;
    })
    .then(settings => credentials.inputEmail(settings.username).then(data => Object.assign(settings, data)))
    .then(settings => credentials.inputPassword(settings.password).then(data => Object.assign(settings, data)))
    .then(settings => credentials.inputPasswordVerify(settings.verify).then(data => Object.assign(settings, data)))
    .then(settings => {
      if (settings.password !== settings.verify) return Promise.reject(new Error('Password validation failed'));
      return settings;
    })
    .then(settings => credentials.signup(settings).then(data => Object.assign(settings, data)))
    .then(settings => {
      if (settings.error === 'Document update conflict') return Promise.reject(new Error('The user already exists'));
      if (settings.error || settings.message) return Promise.reject(new Error(settings.message));
      if (!settings.token) return Promise.reject(new Error('Sign up failed'));
      return settings;
    })
    .then(settings => configuration.save(settings))
    .then(settings => {
      return fetch(`${settings.url}/auth/account`, {headers: {Authorization: `Bearer ${settings.token}`, timeout: 10}})
        .then(response => (response.status >= 400 ? Promise.reject(new Error(`Response error: ${response.statusText}`)) : response))
        .then(response => response.json().then(data => Object.assign({}, data, {version: response.headers.get('x-dropstack-version')})))
        .then(data => Object.assign({}, data, settings));
    })
    .then(data => (Boolean(data.error || data.message) ? Promise.reject(new Error(data.message)) : data))
    .then(data => {
      let message = `${chalk.green(`User ${chalk.bold(data.id)} logged in successful!\n\n`)}`;
      message += `${chalk.gray(`${pad(15, 'Account ID', ' ')}: ${chalk.white(data.id)}`)}\n`;
      message += `${chalk.gray(`${pad(15, 'Server Version', ' ')}: ${chalk.white(data.version)}`)}\n`;
      message += `${chalk.gray(`${pad(15, 'Client Version', ' ')}: ${chalk.white(appPackage.version)}`)}\n`;
      message += `${chalk.gray(`${pad(15, 'Server URL', ' ')}: ${chalk.white(data.url)}`)}`;
      if (data.signedUpAt) message += `\n${chalk.gray(`${pad(15, 'Signed up', ' ')}: ${chalk.white(new Date(data.signedUpAt))}`)}`;
      if (token) message += `\n${chalk.gray(`${pad(15, 'JSON Web Token', ' ')}: ${chalk.white(data.token)}`)}`;
      console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}));
      process.exit(0);
    })
    .catch(err => {
      if (err.message === 'canceled') {
        console.log(chalk.yellow('\nOperation aborted.'));
        return process.exit(0);
      }

      if (err.message === 'The user already exists') {
        console.error(chalk.red(`\nSign up failed. This account already exists.`));
        return process.exit(1);
      }

      if (err.message === 'Password validation failed') {
        console.error(chalk.red(`Password validation failed. Try again please.`));
        return process.exit(1);
      }

      if (err.message === 'Sign up failed') {
        console.error(chalk.red(`\nSign up failed. Try again later please.`));
        process.exit(1);
      }

      if (err.message === 'Not found') {
        console.error(chalk.red(`\nServer communication error occurred! Retry later please.\nError: ${chalk.gray(err.message)}`));
        process.exit(1);
      }

      console.error(chalk.red(`\nAn unexpected error occurred!\nError: ${chalk.gray(err.message)}`));
      process.exit(1);
    });
}

function pad(width, string, padding) {
  return width <= string.length ? string : pad(width, string + padding, padding);
}
