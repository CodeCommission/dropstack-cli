#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const boxen = require('boxen');
const fetch = require('node-fetch');
const urlRegex = require('url-regex');
const chalk = require('chalk');
const credentials = require('../lib/credentials')();
const configuration = require('../lib/settings')();

program
  .arguments('<url>')
  .option('-t, --token', 'Show JSON Web Token.')
  .action(url => login(Object.assign({url: url, token: program.token})))
  .parse(process.argv);

if(!program.args.length) login(program.opts());

function login({url, token}) {
  if(url && !urlRegex({exact: true}).test(url)) {
    console.log(chalk.red('Invalid Dropstack-Server-URL. Must be the format http(s)://host.domain.com.'));
    return process.exit(1);
  }

  configuration.removeGlobalFile()
  .then(()  => configuration.load({url}))
  .then(settings => {
    console.log(chalk.green(`Account information for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(settings.url || '-')}`));
    console.log(chalk.yellow(`Enter your email and password to log in or sign up for free!\n`));
    return settings;
  })
  .then(settings => credentials.inputEmail(settings.username).then(data => Object.assign(settings, data)))
  .then(settings => credentials.inputPassword(settings.password).then(data => Object.assign(settings, data)))
  .then(settings => credentials.login(settings).catch(() => credentials.signup(settings)).then(data => Object.assign(settings, data)))
  .then(settings => {
    if(!settings.token) return Promise.reject(new Error('Sign in failed'));
    if(settings.error || settings.message) return Promise.reject(new Error(settings.message));
    return settings;
  })
  .then(settings => configuration.save(settings))
  .then(settings => {
    return fetch(`${settings.url}/auth/account`, { headers: { 'Authorization': `Bearer ${settings.token}`, timeout: 10, } })
    .then(response => response.status >= 400 ? Promise.reject(new Error(`Response error: ${response.statusText}`)) : response)
    .then(response => response.json().then(data => Object.assign({}, data, {version: response.headers.get('version')})))
    .then(data => Object.assign({}, data, settings));
  })
  .then(data => Boolean(data.error || data.message) ? Promise.reject(new Error(data.message)) : data)
  .then(data => {
    let message = `${chalk.green(`User ${chalk.bold(data.id)} logged in successful!\n\n`)}`;
    message += `${chalk.gray(`${pad(15, 'Account ID', ' ')}: ${chalk.white(data.id)}`)}\n`;
    message += `${chalk.gray(`${pad(15, 'Server Version', ' ')}: ${chalk.white(data.version)}`)}\n`;
    message += `${chalk.gray(`${pad(15, 'Server URL', ' ')}: ${chalk.white(data.url)}`)}\n`;
    message += `${chalk.gray(`${pad(15, 'Plan', ' ')}: ${chalk.white(data.metadata && data.metadata.plan)}\n`)}`;
    message += `${chalk.gray(`${pad(15, 'Team (beta)', ' ')}: ${chalk.white(data.metadata && data.metadata.team || '-')}`)}`;
    if(token) message += `\n${chalk.gray(`${pad(15, 'JSON Web Token', ' ')}: ${chalk.white(data.token)}`)}`;
    console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}));
    process.exit(0);
  })
  .catch(err => {
    if(err.message === 'canceled') {
      console.log(chalk.yellow('\nAborted operation.'));
      return process.exit(0);
    }

    if(err.message === 'The user already exists') {
      console.error(chalk.red(`\nSign in failed. This account already exists.`));
      return process.exit(1);
    }

    if(err.message === 'Sign in failed') {
      console.error(chalk.red(`\nCredentials not found. Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`));
      process.exit(1);
    }

    if(err.message === 'Unauthorized') {
      console.error(chalk.red(`\nUnauthorized. Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`));
      process.exit(1);
    }

    if(err.message === 'Not found') {
      console.error(chalk.red(`\nServer communication error occurred! Retry later please.\nError: ${chalk.gray(err.message)}`));
      process.exit(1);
    }

    console.error(chalk.red(`\nAn unexpected error occurred!\nError: ${chalk.gray(err.message)}`));
    process.exit(1);
  });
}

function pad(width, string, padding) {
  return (width <= string.length) ? string : pad(width, string + padding, padding)
}