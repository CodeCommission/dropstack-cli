#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const boxen = require('boxen');
const fetch = require('node-fetch');
const urlRegex = require('url-regex');
const chalk = require('chalk');
const credentials = require('../lib/credentials')();
const configuration = require('../lib/settings')();
const appPackage = require('../package.json');

program
  .option('-r, --reset', 'Request an account password reset.')
  .option('-t, --token', 'Show JSON Web Token.')
  .action(() => account({reset: program.reset, token: program.token}))
  .parse(process.argv);

if (!program.args.length) account(program.opts());

function account({reset, token}) {
  configuration
    .load()
    .then(settings => {
      console.log(chalk.green(`Account information for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(settings.url || '-')}`));
      if (!(settings.token && settings.username)) return Promise.reject(new Error('Sign in failed'));
      return settings;
    })
    .then(settings => (reset ? credentials.reset(settings).then(data => Promise.reject(data)) : Promise.resolve(settings)))
    .then(settings => {
      return fetch(`${settings.url}/auth/account`, {
        headers: {Authorization: `Bearer ${settings.token}`, timeout: 10}
      })
        .then(response => (response.status >= 400 ? Promise.reject(new Error(`Response error: ${response.statusText}`)) : response))
        .then(response =>
          response.json().then(data =>
            Object.assign({}, data, {
              version: response.headers.get('x-dropstack-version')
            })
          )
        )
        .then(data => Object.assign({}, settings, data));
    })
    .then(data => (Boolean(data.message) ? Promise.reject(new Error(data.message)) : data))
    .then(data => {
      let message = `${chalk.gray(`${pad(15, 'Account ID', ' ')}: ${chalk.white(data.id)}`)}\n`;
      message += `${chalk.gray(`${pad(15, 'Server Version', ' ')}: ${chalk.white(data.version)}`)}\n`;
      message += `${chalk.gray(`${pad(15, 'Client Version', ' ')}: ${chalk.white(appPackage.version)}`)}\n`;
      message += `${chalk.gray(`${pad(15, 'Server URL', ' ')}: ${chalk.white(data.url)}`)}`;
      if (data.signedUpAt) message += `\n${chalk.gray(`${pad(15, 'Signed up', ' ')}: ${chalk.white(new Date(data.signedUpAt))}`)}`;
      if (token) message += `\n${chalk.gray(`${pad(15, 'JSON Web Token', ' ')}: ${chalk.white(data.token)}`)}`;
      console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}));

      process.exit(0);
    })
    .catch(err => {
      if (err.message === "We've just sent you an email to reset your password.") {
        console.log(`\n${chalk.yellow(err.message)}`);
        return process.exit(0);
      }

      if (err.message === 'canceled') {
        console.log(chalk.yellow('\nOperation aborted.'));
        return process.exit(0);
      }

      if (err.message === 'Sign in failed') {
        console.error(chalk.red(`\nCredentials not found. Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`));
        process.exit(1);
      }

      if (err.message === 'Unauthorized') {
        console.error(chalk.red(`\nUnauthorized. Use ${chalk.bold('dropstack login <url>')} to verifiy your credentials.`));
        process.exit(1);
      }

      if (err.message === 'Not found') {
        console.error(chalk.red(`\nServer communication error occurred! Retry later please.\nError: ${chalk.gray(err.message)}`));
        process.exit(1);
      }

      console.error(chalk.red(`\nAn unexpected error occurred!\nError: ${chalk.gray(err.message)}`));
      process.exit(1);
    });
}

function pad(width, string, padding) {
  return width <= string.length ? string : pad(width, string + padding, padding);
}
