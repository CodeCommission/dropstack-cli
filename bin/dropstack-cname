#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const chalk = require('chalk');
const fetch = require('node-fetch');
const configuration = require('../lib/settings')();

program
  .arguments('<name> <cname>')
  .action((x, y) => cname({name: x, serviceCName: y}))
  .parse(process.argv);

function cname(setup) {
  if(!(setup.serviceCName && setup.name)) console.error(chalk.red(`Invalid parameters.`));

  configuration
  .load()
  .then(settings => { console.log(`Setup CNAME ${chalk.green.underline(setup.serviceCName)} of deployment ${chalk.green.underline(setup.name)} | ${chalk.green.underline(settings.username)}`); return settings;})
  .then(settings => Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed. Use `dropstack login` to log in with your credentials.')) : settings)
  .then(settings => fetch(`${settings.url}/deploys/${setup.name || settings.serviceName}/cname`, { method: 'POST', body: JSON.stringify({serviceCName: setup.serviceCName || ''}), headers: { Authorization: `Bearer ${settings.token}`, 'Content-Type': 'application/json' } }).then(response => response.json()).then(data => Object.assign(settings, data)))
  .then(data => Boolean(data.message) ? Promise.reject(new Error(data.message)) : data)
  .then(settings => configuration.save(settings))
  .then(settings => console.log(chalk.green(`CNAME ${chalk.bold.underline(settings.serviceCName)} for ${settings.serviceUrl.replace('https://', '')} updated`)))
  .catch(err => {
    if(err.message === 'Sign in failed. Use `dropstack login` to log in with your credentials.'){
      console.error(chalk.red(`Credentials not found. Use ${chalk.bold('dropstack login')} to verifiy your credentials.`));
      process.exit(1);
    }
    console.error(chalk.red(`\nAn error occurred: ${chalk.gray(err.message)}`));
    process.exit(1);
  });
}
