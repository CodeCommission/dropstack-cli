#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const boxen = require('boxen');
const chalk = require('chalk');
const fetch = require('node-fetch');
const copyPaste = require('copy-paste');
const configuration = require('../lib/settings')();

program
  .arguments('[name]')
  .option('-u, --url [url]', 'Alias name (e.g. www.example.com)')
  .action(name => alias({name: name || '', url: program.url}))
  .parse(process.argv);

if(!program.args.length) alias(program.opts());

function alias({name, url}) {
  if(!url) {
    console.error(chalk.red(`Enter a alias name. Use 'dropstack alias -h' for more informations.`));
    process.exit(1);
  }

  configuration
  .load()
  .then(settings => { console.log(`Aliasing ${chalk.green.underline(name || settings.name || '-')} for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(settings.url || '-')}`); return settings;})
  .then(settings => Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed. Use `dropstack login` to log in with your credentials.')) : settings)
  .then(settings => Boolean(name || settings.name) ? settings : Promise.reject(`Enter a deployment name. Use 'dropstack alias -h' for more informations.`))
  .then(settings => fetch(`${settings.url}/deploys/${name || settings.name}/alias`, { method: 'PUT', body: JSON.stringify({serviceAlias: url || ''}), headers: { Authorization: `Bearer ${settings.token}`, 'Content-Type': 'application/json' } })
    .then(response => response.status >= 400 ? Promise.reject(new Error(`Response error: ${response.statusText}`)) : response)
    .then(response => response.json()))
  .then(data => Boolean(data.message) ? Promise.reject(new Error(data.message)) : data)
  .then(data => {
    copyPaste.copy(`https://${data.serviceAlias || data.serviceUrl || ''}`);

    let message = chalk.green(`Alias ${chalk.bold(data.serviceName)} updated - ${data && data.serviceInstances && `${data.serviceInstances} running instance(s)!\n`}`);
    message += '\n';
    message += `• URL: ${chalk.bold(`https://${data.serviceUrl}`)}\n`;
    if(data && data.serviceAlias) message += `• Alias: ${chalk.bold(data.serviceAlias)}\n`;
    message += `\n${chalk.gray('URL copied to clipboard.')}`;
    console.log();
    console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}));
  })
  .catch(err => {
    if(err.message === 'Sign in failed. Use `dropstack login` to log in with your credentials.'){
      console.error(chalk.red(`Credentials not found. Use ${chalk.bold('dropstack login')} to verifiy your credentials.`));
      process.exit(1);
    }
    console.error(chalk.red(`\nAn unexpected error occurred! Message: "${chalk.gray(err.message)}"`));
    process.exit(1);
  });
}
