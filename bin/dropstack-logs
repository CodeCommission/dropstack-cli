#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const chalk = require('chalk');
const fetch = require('node-fetch');
const configuration = require('../lib/settings')();

program
  .arguments('<name>')
  .option('-f, --follow', 'Follow the log output.')
  .action(name => log({
    name: name,
    follow: program.follow,
  }))
  .parse(process.argv);

function log({name, follow}) {
  configuration
  .load()
  .then(settings => { console.log(`Logs for deployment ${chalk.green.underline(name)} | ${chalk.green.underline(settings.username)}`); return settings;})
  .then(settings => Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed. Use `dropstack login` to log in with your credentials.')) : settings)
  .then(settings => fetch(`${settings.url}/deploys/${name || settings.serviceName}/logs?${follow ? 'follow='+follow : ''}`, { headers: { Authorization: `Bearer ${settings.token}`, } }))
  .then(response => {
    return new Promise((resolve, reject) => {
      response.body.on('end', () => resolve());
      response.body.on('data', data => {
        const msg = JSON.parse(data);
        if(msg.message) return reject(new Error(msg.message));
        console.log((msg.log || '').replace('\n', ''));
      });
    });
  })
  .catch(err => {
    if(err.message === 'Error fetching service'){
      console.error(chalk.red(`Deployment not found`));
      process.exit(1);
    }
    if(err.message === 'Sign in failed. Use `dropstack login` to log in with your credentials.'){
      console.error(chalk.red(`Credentials not found. Use ${chalk.bold('dropstack login')} to verifiy your credentials.`));
      process.exit(1);
    }
    console.error(chalk.red(`\nAn error occurred: ${chalk.gray(err.message)}`));
    process.exit(1);
  });
}
