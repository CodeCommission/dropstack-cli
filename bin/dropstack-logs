#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const program = require('commander');
const chalk = require('chalk');
const fetch = require('node-fetch');
const configuration = require('../lib/settings')();

program
  .arguments('[name]')
  .option('-f, --nofollow', 'Do not follow stream')
  .action(name => log({
    name: name,
    follow: !Boolean(program.nofollow),
  }))
  .parse(process.argv);

function log({name, follow}) {
  configuration
  .load()
  .then(settings => { console.log(`Logs ${chalk.green.underline(name || settings.name || '-')} for ${chalk.green.underline(settings.username || '-')} on ${chalk.green.underline(settings.url || '-')}`); return settings;})
  .then(settings => Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Sign in failed. Use `dropstack login` to log in with your credentials.')) : settings)
  .then(settings => fetch(`${settings.url}/deploys/${name || settings.serviceName}/logs?${!follow ? 'follow='+follow : 'follow=true'}`, { headers: { Authorization: `Bearer ${settings.token}`, } }))
  .then(response => {
    return new Promise((resolve, reject) => {
      if(response.status >= 400) reject(new Error(`Response error: ${response.statusText}`));
      response.body.on('data', data => process.stdout.write(data));
    });
  })
  .catch(err => {
    if(err.message === 'Error fetching service'){
      console.error(chalk.red(`Deployment not found`));
      process.exit(1);
    }
    if(err.message === 'Sign in failed. Use `dropstack login` to log in with your credentials.'){
      console.error(chalk.red(`Credentials not found. Use ${chalk.bold('dropstack login')} to verifiy your credentials.`));
      process.exit(1);
    }
    console.error(err)
    console.error(chalk.red(`\nAn error occurred: ${chalk.gray(err.message)}`));
    process.exit(1);
  });
}
