#!/usr/bin/env node
const DROPSTACK_BASE_URL = process.env.DROPSTACK_BASE_URL || `https://api.dropstack.run`;

const fs = require('fs');
const path = require('path');
const program = require('commander');
const chalk = require('chalk');
const fetch = require('node-fetch');
const stackSettings = require('../lib/stack-settings')();

program
  .arguments('<name>')
  .option('-f, --follow', 'Follow the log output.')
  .action(name => log({
    name: name,
    follow: program.follow,
  }))
  .parse(process.argv);

function log({name, follow}) {
  console.log(`Logs for ${name}`);

  stackSettings.load()
  .then(settings => Boolean(!(settings.token && settings.username)) ? Promise.reject(new Error('Login please')) : settings)
  .then(settings => fetch(`${DROPSTACK_BASE_URL}/stacks/${name || settings.serviceName}/logs?follow=${follow}`, { headers: { Authorization: `Bearer ${settings.token}`, } }))
  .then(response => {
    return new Promise((resolve, reject) => {
      response.body.on('end', () => resolve());
      response.body.on('data', data => {
        const msg = JSON.parse(data);
        console.log((msg.log || '').replace('\n', ''));
      });
    });
  })
  .catch(err => {
    if(err.message === 'Login please'){
      console.error(chalk.red(err.message));
      process.exit(1);
    }
    console.error(chalk.red(`\nAn error occurred: ${chalk.gray(err.message)}`));
    process.exit(1);
  });
}
